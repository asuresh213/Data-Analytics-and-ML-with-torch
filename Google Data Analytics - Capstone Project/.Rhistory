moneys <- merge(panel_cost, house_prices, by="state")
moneys <- merge(moneys, state_demographics, by="state")
# Turning all non-numeric entries to numbers
moneys <- moneys %>%
mutate(number_of_customers = parse_number(as.character(number_of_customers)))%>%
mutate(average_installation_cost = parse_number(as.character(average_installation_cost))) %>%
mutate(avg_house_price = parse_number(as.character(avg_house_price))) %>%
mutate(average_monthly_consumption = parse_number(as.character(average_monthly_consumption))) %>%
mutate(price_per_kwh = price_per_kwh/100)
# ------------------------- analysis part 1 ---------------------------
# Solar analysis:
# I want to average values across an entire state (as opposed to treating this problem zipcode by zipcode)
# Check to see the standard deviation of the kw data to see if it is reasonable to average
# across the entire state.
# To see this, let's see what the standard deviation of the kw_per_house value is across
# the entire state, and report the worst ones higher up.
sd_data <- solar_by_zip %>%
group_by(state) %>%
summarise(sd_kw = sd(kw_potential_for_median_house), sd_yearly = sd(yearly_solar_kwh_produced)) %>%
arrange(-sd_kw)
# Hmmmmmm pretty high standard deviation for kw per house
# A quick search says a single panel produces ~1.5-2.5 kWh/day
# Times max 20 panels per house, that's max production cap of 50kWh.
# Scaling to a year, we can produce a theoretical maximum of ~18000kWh/year
# However realistically, not every house is not going to have 20 panels.
# So we estimate some more realistic numbers for kw potential.
# Let's look at some outliers.
solar_by_zip %>%
filter(kw_potential_for_median_house >= 30) %>%
filter(yearly_solar_kwh_produced >=18000)
# Aha! Each one of the listed zipcodes is a solar farm or a big establishment,
# (check google maps)
# So, of course these values are ridiculous.
# More importantly, we can conveniently remove these outliers from our data
solar_by_zip <- solar_by_zip %>%
filter(kw_potential_for_median_house <= 30) %>%
filter(yearly_solar_kwh_produced <= 18000)
# Lets compute sd again.
sd_data <- solar_by_zip %>%
group_by(state) %>%
summarise(sd_kw = sd(kw_potential_for_median_house), sd_yearly = sd(yearly_solar_kwh_produced)) %>%
arrange(-sd_kw)
# Much better SD for kw_potential per house. This tells us that we have successfully eliminated
# all bigger entities like solar farms or big malls or whatever.
worst_sd_kw <- slice(sd_data, 1:5)
ggplot(data = worst_sd_kw) + geom_bar(mapping = aes(x=state, y=sd_kw), stat="identity")
# However, the yearly_kwh_produced still has big variability within a state.
# Let us see some examples to observe if there are major outliers causing this.
worst_sd_yearly <- sd_data %>% arrange(-sd_yearly) %>% slice(1:5) %>% select(state)
worst_yearly_states = c("New Mexico", "District of Columbia", "North Dakota", "Michigan", "Montana")
plot_data <- solar_by_zip %>%
subset(state %in% worst_yearly_states)
ggplot(data = plot_data) +
geom_point(mapping = aes(x=zip_code, y=estimated_percent_of_houses_qualified, color=state)) +
facet_wrap(~state, scales = "free") +
theme(legend.position = "none")
# So the all states except Michigan have bad standard deviations from a lack of data points or a few outliers
# in the case of Washington DC.
# Since we do not want the outliers to skew our analysis, for our global state by state analysis, we will
# only consider the median kwh output for all data points in that state.
# Finally we perform a similar analysis on carbon offset, and we see that there are some outliers here too
# that skew the average by quite a bit, and give a huge standard deviation.
sd_carbon_offset<- solar_by_zip %>%
group_by(state) %>%
summarise(sd_carbon = sd(estimated_avg_carbon_offset)) %>%
arrange(-sd_carbon)
plot_data  <- solar_by_zip %>% select(zip_code, state, estimated_avg_carbon_offset) %>% subset(state=="Florida")
ggplot(data=plot_data) + geom_point(aes(x=zip_code,y=estimated_avg_carbon_offset))
# Once again, to remain unbiased by outliers, we will take the median carbon offset
median_solar_by_state <- solar_by_zip %>%
group_by(state) %>%
summarise(median_kw_potential = median(kw_potential_for_median_house),
median_yearly_kwh_produced = median(yearly_solar_kwh_produced),
median_percent_houses_qualified = median(estimated_percent_of_houses_qualified),
median_carbon_offset = median(estimated_avg_carbon_offset))
# Merge the two relevant data sets into one
main_df <- merge(median_solar_by_state, moneys, by="state")
# Building the model.
impact_factor = 0.3333
economical_factor = 0.3333
savings_factor = 0.3333
main_df <- main_df %>%
mutate(impact = (100*median_carbon_offset)/(median_percent_houses_qualified*number_of_customers)) %>%
mutate(impact = (impact/max(impact))) %>%
mutate(economical = -(average_installation_cost/avg_house_price) + (median_yearly_kwh_produced)/(average_monthly_consumption*12))%>%
mutate(economical = (economical/max(economical))) %>%
mutate(savings = (-average_monthly_consumption*12 + median_yearly_kwh_produced)*price_per_kwh) %>%
mutate(savings = (savings/max(savings))) %>%
mutate(naive_model = impact_factor*impact + economical_factor*economical + savings_factor*savings) %>%
mutate(naive_model = naive_model/max(naive_model))%>%
arrange(-naive_model)%>%
mutate(aggregate_rank = c(1:50))
write.csv(main_df, file="naive_model.csv")
#----------- More deets
# Model by zip_code
zip_wise_customers <- solar %>%
select(region_name, count_qualified) %>%
set_colnames(c('zip_code', 'num_customers'))
model_2_solar <- merge(solar_by_zip, zip_wise_customers, by='zip_code')
model_2_moneys <- moneys %>%
select(-number_of_customers)
model_2_main_df <- merge(model_2_solar, model_2_moneys, by='state')
model_2_main_df <- model_2_main_df %>%
mutate(impact = (100*estimated_avg_carbon_offset)/(estimated_percent_of_houses_qualified*num_customers)) %>%
mutate(impact = (impact/max(impact))) %>%
mutate(economical = -(average_installation_cost/avg_house_price) + (yearly_solar_kwh_produced)/(average_monthly_consumption*12))%>%
mutate(economical = (economical/max(economical))) %>%
mutate(savings = (-average_monthly_consumption*12 + yearly_solar_kwh_produced)*price_per_kwh) %>%
mutate(savings = (savings/max(savings))) %>%
mutate(naive_model = impact_factor*impact + economical_factor*economical + savings_factor*savings) %>%
mutate(naive_model = naive_model/max(naive_model))%>%
arrange(-naive_model)
write.csv(model_2_main_df, file="naive_model_deets.csv")
library("rmarkdown")
render("testing.rmd", output_format = "html_notebook")
render("testing.Rmd", output_format = "html_notebook")
plot(cars)
Try executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Ctrl+Shift+Enter*.
plot(cars)
source("C:/Users/Arun Suresh/Dropbox/Capstone project/capstone.R")
```{r}
render("testing.Rmd", output_format = "html_notebook")
render("testing.Rmd", output_format = "html_notebook")
library("tidyverse")
library("dplyr")
library("magrittr")
library("sigmoid")
library("readr")
# Reading the files
solar <- read.csv("solar.csv")
tibble(solar)
summary(solar)
str(solar)
colnames(solar)
dim(solar)
count(solar, states)
count(solar, state_name)
count(solar_by_zip, state)
solar %>% unique(state_name)
unqiue(solar['state_name'])
unique(solar['state_name'])
unique(count(solar['state_name']))
solar %>% summarise(count = n_distinct(state_name))
colnames(solar)
count(solar, state_name)
solar_by_zip %>% filter(count(state) < 50)
solar_by_zip %>% filter(count(solar_by_zip, state) < 50)
count(solar_by_zip, state)
count(solar_by_zip, state) %>% filter(n<50)
count(solar_by_zip, state) %>% filter(n<20)
count(solar_by_zip, state) %>% filter(n<30)
tibble(solar)
solar %>% unique(state_name)
unique(solar, state_name)
unique(solar['state_name'])
solar %>% filter(percent_covered >= percent_qualified)
solar %>% filter(percent_covered <= percent_qualified)
nrow(solar %>% filter(percent_covered <= percent_qualified))
nrow(solar %>% is.na())
solar %>% is.na()
solar %>% which(is.na())
which(is.na(solar))
nrows(which(is.na(solar)))
which(is.na(solar))
colSums(is.na(solar))
sum(is.na(solar))
solar %>% max(percent_covered)
max(solar['percent_covered'])
average(solar['percent_covered'])
mean(solar['percent_covered'])
mean(solar['percent_covered'], na.omit)
mean(solar['percent_covered'], na.rm=TRUE)
solar %>% na.omit() %>% summarise(avg_percent_covered = mean(percent_covered))
count(solar_by_zip, state) %>% filter(n<30)
solar_by_zip %>%
filter(kw_potential_for_median_house >= 30) %>%
filter(yearly_solar_kwh_produced >=18000)
solar %>% group_by(state) %>% filter(percent_covered<=percent_qualified)
library("tidyverse")
library("dplyr")
library("magrittr")
library("sigmoid")
library("readr")
solar %>% group_by(state) %>% filter(percent_covered<=percent_qualified)
solar %>% group_by(state_name) %>% filter(percent_covered<=percent_qualified)
test <- solar %>% group_by(state_name) %>% filter(percent_covered<=percent_qualified)
View(test)
test <- solar %>% filter(percent_covered<=percent_qualified)
View(test)
test <- solar %>% filter(percent_covered<=percent_qualified) %>% group_by(state_name)
View(test)
solar %>% group_by(state_name) %>% summarise(num = count(percent_covered <= percent_qualified))
solar %>% group_by(state_name) %>% summarise(num = sum(percent_covered <= percent_qualified))
solar %>% group_by(state_name) %>% summarise(bad = sum(percent_covered <= percent_qualified), good = unique(region_name))
solar %>% group_by(state_name) %>% reframe(bad = sum(percent_covered <= percent_qualified), good = unique(region_name))
solar %>% group_by(state_name) %>% reframe(bad = sum(percent_covered <= percent_qualified))
solar %>% group_by(state_name) %>% reframe(bad = sum(percent_covered <= percent_qualified), good = table(solar$state_name))
solar$state_name
table(solar$state_name)
solar %>% group_by(state_name) %>% reframe(bad = sum(percent_covered <= percent_qualified), good = count(state_name))
solar %>% count(state_name)
solar %>% group_by(state_name) %>% reframe(bad = sum(percent_covered <= percent_qualified)) %>% mutate(count(state_name))
solar %>% group_by(state_name) %>% reframe(bad = sum(percent_covered <= percent_qualified)) %>% reframe(good=count(state_name))
solar %>% group_by(state_name) %>% reframe(bad = sum(percent_covered <= percent_qualified)) %>% reframe(good=count(solar$state_name))
test2 <- solar %>% count(state_name)
test1 <- solar %>% group_by(state_name) %>% reframe(bad = sum(percent_covered <= percent_qualified))
test2 <- solar %>% count(state_name)
test1 <- solar %>% group_by(state_name) %>% reframe(bad = sum(percent_covered <= percent_qualified))
merge(test1, test2, by="state_name")
test2 <- solar %>% reframe(good = count(state_name))
View(test2)
test2 <- solar %>% reframe(good = count(state_name)['n'])
test2 <- solar %>% reframe(good = count('state_name')['n'])
test2 <- solar %>% reframe(good = count(state_name)[n])
test2 <- solar %>% count(state_name)[n]
test2 <- solar %>% count(state_name)['n']
test2 <- solar %>% count(state_name)
test2 <- solar %>% (count(state_name))['n']
test2 <- count(solar, state_name)['n']
test1 <- solar %>% group_by(state_name) %>% reframe(bad = sum(percent_covered <= percent_qualified)) %>% reframe(good = count(solar, state_name)['n'])
View(test1)
test1 <- solar %>% group_by(state_name) %>% reframe(bad = sum(percent_covered <= percent_qualified)) %>% mutate(good = count(solar, state_name)['n'])
View(test1)
test1 <- solar %>% group_by(state_name) %>% reframe(bad = sum(percent_covered <= percent_qualified)) %>% mutate(good = count(solar, state_name)['n']) %>% mutate(percent_bad = (bad/good)*100)
View(test1)
solar %>% group_by(state_name) %>% reframe(bad = sum(percent_covered <= percent_qualified)) %>% mutate(good = count(solar, state_name)['n']) %>% mutate(percent_bad = (bad/good)*100) %>% arrange(-percent_bad)
solar %>% count(state_name)
solar %>% count(state_name) %>% arrange(n)
solar %>% group_by(state_name) %>% reframe(bad = sum(percent_covered <= percent_qualified)) %>% mutate(good = count(solar, state_name)['n']) %>% mutate(percent_bad = (bad/good)*100) %>% arrange(-percent_bad)
View(panel_cost)
solar_by_zip %>%
group_by(state) %>%
reframe(bad_kw_pot = sum(kw_potential_for_median_house >= 30), bad_yearly_kwh = sum(yearly_solar_kwh_produced >=18000)) %>%
mutate(num_kw_pot = count(solar_by_zip, kw_potential_for_median_house)['n']) %>%
mutate(num_yearly_kwh = count(solar_by_zip, yearly_solar_kwh_produced)['n']) %>%
mutate(percent_bad_kw_pot = (bad_kw_pot/num_kw_pot)*100) %>%
mutate(percent_bad_yearly_kwh = (bad_yearly_kwh/num_yearly_kwh)*100)
count(solar_by_zip, kw_potential_for_median_house)
solar_by_zip %>%
group_by(state) %>%
reframe(bad_kw_pot = sum(kw_potential_for_median_house >= 30), bad_yearly_kwh = sum(yearly_solar_kwh_produced >=18000)) %>%
mutate(num_kw_pot = count(solar_by_zip, state)['n']) %>%
mutate(num_yearly_kwh = count(solar_by_zip, state)['n']) %>%
mutate(percent_bad_kw_pot = (bad_kw_pot/num_kw_pot)*100) %>%
mutate(percent_bad_yearly_kwh = (bad_yearly_kwh/num_yearly_kwh)*100)
temp <- solar_by_zip %>%
group_by(state) %>%
reframe(bad_kw_pot = sum(kw_potential_for_median_house >= 30), bad_yearly_kwh = sum(yearly_solar_kwh_produced >=18000)) %>%
mutate(num_kw_pot = count(solar_by_zip, state)['n']) %>%
mutate(num_yearly_kwh = count(solar_by_zip, state)['n']) %>%
mutate(percent_bad_kw_pot = (bad_kw_pot/num_kw_pot)*100) %>%
mutate(percent_bad_yearly_kwh = (bad_yearly_kwh/num_yearly_kwh)*100)
View(temp)
library("tidyverse")
library("dplyr")
library("magrittr")
library("sigmoid")
library("readr")
# Reading the files
solar <- read.csv("solar.csv")
panel_cost <- read.csv("panel_cost.csv")
monthly_power <- read.csv("avg_kwh_consumption.csv")
house_prices <- read.csv("house_prices.csv")
#------------ cleaning and setting up -------------------------------
# Pre-processing solar by extracting useful columns
# Note: some data is errenuous where the reported % of houses qualified for the project
# is greater than the % of houses checked.
# While we are at it, let us also scale the proportions so that the % houses covered = 100 for all zip codes.
# Let's also omit all NAs
# Finally let us also rename the columns to make their content more clear
# We are also interested only in mainland US for this project, so we will remove all the
# other regions that are included in the data.
# Also Carolina is a separate entry from NC and SC. Not exactly sure what that place is.
# So we will remove it too.
areas_to_del = c("Aguadilla","Arecibo", "Baja California",
"Bayamón","Canóvanas","Cataño","Carolina",
"Cataño","Corozal","Dorado","Guaynabo",
"Hormigueros","Mayagüez","Moca","Ponce",
"San Juan","Toa Alta","Toa Baja","Trujillo Alto")
solar %>% count(state_name) %>% arrange(n)
solar %>% group_by(state_name) %>% reframe(bad = sum(percent_covered <= percent_qualified)) %>% mutate(good = count(solar, state_name)['n']) %>% mutate(percent_bad = (bad/good)*100) %>% arrange(-percent_bad)
solar_by_zip <- solar %>%
select(region_name, state_name, percent_covered, percent_qualified, kw_median, yearly_sunlight_kwh_median, carbon_offset_metric_tons) %>%
filter(percent_covered >= percent_qualified)%>%
mutate(estimated_percent_qualified = (100.00/percent_covered)*percent_qualified) %>%
select(-percent_covered, -percent_qualified) %>%
na.omit %>%
subset(!(state_name %in% areas_to_del)) %>%
set_colnames(c('zip_code', 'state', 'kw_potential_for_median_house', 'yearly_solar_kwh_produced','estimated_avg_carbon_offset','estimated_percent_of_houses_qualified'))
count(solar_by_zip, state) %>% filter(n<30)
# Pre-processing panel_cost data frame and extracting the cost of panel installation by state
panel_cost <- panel_cost %>%
select(STATE, AVERAGE.COST.FOR.6.KW.SYSTEM.WITH.26..FEDERAL.TAX.CREDIT.APPLIED) %>%
set_colnames(c('state', 'average_installation_cost')) %>%
subset(state != "Hawaii")
# Pre-processing monthly_power data and extracting the average monthly power consumption and costs by state
state_demographics <- monthly_power %>%
select(State, Number.of.Customers, Average.Monthly.Consumption..kWh., Average.Price..cents.kWh.)%>%
set_colnames(c('state', 'number_of_customers', 'average_monthly_consumption', 'price_per_kwh'))
# Merging all relevant data into one data frame.
moneys <- merge(panel_cost, house_prices, by="state")
moneys <- merge(moneys, state_demographics, by="state")
# Turning all non-numeric entries to numbers
moneys <- moneys %>%
mutate(number_of_customers = parse_number(as.character(number_of_customers)))%>%
mutate(average_installation_cost = parse_number(as.character(average_installation_cost))) %>%
mutate(avg_house_price = parse_number(as.character(avg_house_price))) %>%
mutate(average_monthly_consumption = parse_number(as.character(average_monthly_consumption))) %>%
mutate(price_per_kwh = price_per_kwh/100)
# ------------------------- analysis part 1 ---------------------------
# Solar analysis:
# I want to average values across an entire state (as opposed to treating this problem zipcode by zipcode)
# Check to see the standard deviation of the kw data to see if it is reasonable to average
# across the entire state.
# To see this, let's see what the standard deviation of the kw_per_house value is across
# the entire state, and report the worst ones higher up.
sd_data <- solar_by_zip %>%
group_by(state) %>%
summarise(sd_kw = sd(kw_potential_for_median_house), sd_yearly = sd(yearly_solar_kwh_produced)) %>%
arrange(-sd_kw)
# Hmmmmmm pretty high standard deviation for kw per house
# A quick search says a single panel produces ~1.5-2.5 kWh/day
# Times max 20 panels per house, that's max production cap of 50kWh.
# Scaling to a year, we can produce a theoretical maximum of ~18000kWh/year
# However realistically, not every house is not going to have 20 panels.
# So we estimate some more realistic numbers for kw potential.
# Let's look at some outliers.
solar_by_zip %>%
filter(kw_potential_for_median_house >= 30) %>%
filter(yearly_solar_kwh_produced >=18000)
temp <- solar_by_zip %>%
group_by(state) %>%
reframe(bad_kw_pot = sum(kw_potential_for_median_house >= 30), bad_yearly_kwh = sum(yearly_solar_kwh_produced >=18000)) %>%
mutate(num_kw_pot = count(solar_by_zip, state)['n']) %>%
mutate(num_yearly_kwh = count(solar_by_zip, state)['n']) %>%
mutate(percent_bad_kw_pot = (bad_kw_pot/num_kw_pot)*100) %>%
mutate(percent_bad_yearly_kwh = (bad_yearly_kwh/num_yearly_kwh)*100)
View(temp)
temp <- solar_by_zip %>%
group_by(state) %>%
reframe(bad_kw_pot = sum(kw_potential_for_median_house >= 30), bad_yearly_kwh = sum(yearly_solar_kwh_produced >=18000)) %>%
mutate(num_kw_pot = count(solar_by_zip, state)['n']) %>%
mutate(num_yearly_kwh = count(solar_by_zip, state)['n']) %>%
mutate(percent_bad_kw_pot = (bad_kw_pot/num_kw_pot)*100) %>%
mutate(percent_bad_yearly_kwh = (bad_yearly_kwh/num_yearly_kwh)*100) %>%
arrange(-percent_bad_kw_pot)
View(temp)
View(temp)
solar_by_zip %>%
filter(kw_potential_for_median_house >= 20) %>%
filter(yearly_solar_kwh_produced >=18000)
temp <- solar_by_zip %>%
group_by(state) %>%
reframe(bad_kw_pot = sum(kw_potential_for_median_house >= 20), bad_yearly_kwh = sum(yearly_solar_kwh_produced >=18000)) %>%
mutate(num_kw_pot = count(solar_by_zip, state)['n']) %>%
mutate(num_yearly_kwh = count(solar_by_zip, state)['n']) %>%
mutate(percent_bad_kw_pot = (bad_kw_pot/num_kw_pot)*100) %>%
mutate(percent_bad_yearly_kwh = (bad_yearly_kwh/num_yearly_kwh)*100) %>%
arrange(-percent_bad_kw_pot)
View(temp)
View(temp)
temp %>% sum(bad_kw_pot)
sum(temp, bad_kw_pot)
sum(temp['bad_kw_pot'])
solar_by_zip <- solar_by_zip %>%
filter(kw_potential_for_median_house <= 20)
temp <- solar_by_zip %>%
group_by(state) %>%
reframe(bad_yearly_kwh = sum(yearly_solar_kwh_produced >=18000)) %>%
mutate(num_yearly_kwh = count(solar_by_zip, state)['n']) %>%
mutate(percent_bad_yearly_kwh = (bad_yearly_kwh/num_yearly_kwh)*100) %>%
arrange(-percent_bad_yearly_kwh)
View(temp)
plot_data = slice(temp, 2:6)
ggplot(data=temp) + geom_bar(mapping = aes(x=state, y=percent_bad_yearly_kwh, fill = percent_bad_kw_pot), stat = "identity")
plot_data = slice(temp, 2:6)
ggplot(data=temp) + geom_bar(mapping = aes(x=state, y=percent_bad_yearly_kwh, fill = num_yearly_kwh), stat = "identity")
View(plot_data)
ggplot(data=temp) + geom_bar(mapping = aes(x=state, y=percent_bad_yearly_kwh), stat = "identity")
ggplot(data=plot_data) + geom_bar(mapping = aes(x=state, y=percent_bad_yearly_kwh, fill = num_yearly_kwh), stat = "identity")
worst_sd_kw <- slice(sd_data, 1:5)
ggplot(data = worst_sd_kw) + geom_bar(mapping = aes(x=state, y=sd_kw), stat="identity")
plot_data <- slice(temp, 2:6)
ggplot(data=plot_data) + geom_bar(mapping = aes(x=state, y=percent_bad_yearly_kwh, fill = num_yearly_kwh), stat = "identity")
temp <- solar_by_zip %>%
group_by(state) %>%
reframe(bad_yearly_kwh = sum(yearly_solar_kwh_produced >=18000)) %>%
mutate(num_yearly_kwh = count(solar_by_zip, state)['n']) %>%
mutate(percent_bad_yearly_kwh = (bad_yearly_kwh/num_yearly_kwh)*100) %>%
arrange(-percent_bad_yearly_kwh)
plot_data <- slice(temp, 2:6)
ggplot(data=plot_data) + geom_bar(mapping = aes(x=state, y=percent_bad_yearly_kwh, fill = num_yearly_kwh), stat = "identity")
plot_data <- slice(temp, 2:6)
ggplot(data=plot_data) + geom_bar(mapping = aes(x=state, y=percent_bad_yearly_kwh), stat = "identity")
rlang::last_trace()
rlang::last_trace(drop = FALSE)
ggplot(data=plot_data) + geom_bar(mapping = aes(x=state, y=as.numeric(percent_bad_yearly_kwh)), stat = "identity")
temp <- solar_by_zip %>%
group_by(state) %>%
reframe(bad_yearly_kwh = sum(yearly_solar_kwh_produced >=18000)) %>%
mutate(num_yearly_kwh = count(solar_by_zip, state)) %>%
mutate(percent_bad_yearly_kwh = (bad_yearly_kwh/num_yearly_kwh)*100) %>%
arrange(-percent_bad_yearly_kwh)
temp <- solar_by_zip %>%
group_by(state) %>%
reframe(bad_yearly_kwh = sum(yearly_solar_kwh_produced >=18000)) %>%
mutate(num_yearly_kwh = count(solar_by_zip, state)[n]) %>%
mutate(percent_bad_yearly_kwh = (bad_yearly_kwh/num_yearly_kwh)*100) %>%
arrange(-percent_bad_yearly_kwh)
temp <- solar_by_zip %>%
group_by(state) %>%
reframe(bad_yearly_kwh = sum(yearly_solar_kwh_produced >=18000)) %>%
mutate(num_yearly_kwh = count(state)) %>%
mutate(percent_bad_yearly_kwh = (bad_yearly_kwh/num_yearly_kwh)*100) %>%
arrange(-percent_bad_yearly_kwh)
temp <- solar_by_zip %>%
group_by(state) %>%
reframe(bad_yearly_kwh = sum(yearly_solar_kwh_produced >=18000)) %>%
mutate(num_yearly_kwh = count()) %>%
mutate(percent_bad_yearly_kwh = (bad_yearly_kwh/num_yearly_kwh)*100) %>%
arrange(-percent_bad_yearly_kwh)
temp <- solar_by_zip %>%
group_by(state) %>%
reframe(bad_kw_pot = sum(kw_potential_for_median_house >= 20), bad_yearly_kwh = sum(yearly_solar_kwh_produced >=18000)) %>%
mutate(num_kw_pot = n()) %>%
mutate(num_yearly_kwh = n()) %>%
mutate(percent_bad_kw_pot = (bad_kw_pot/num_kw_pot)*100) %>%
mutate(percent_bad_yearly_kwh = (bad_yearly_kwh/num_yearly_kwh)*100) %>%
arrange(-percent_bad_kw_pot)
temp <- solar_by_zip %>%
group_by(state) %>%
reframe(bad_yearly_kwh = sum(yearly_solar_kwh_produced >=18000)) %>%
mutate(num_yearly_kwh = n()) %>%
mutate(percent_bad_yearly_kwh = (bad_yearly_kwh/num_yearly_kwh)*100) %>%
arrange(-percent_bad_yearly_kwh)
View(temp)
temp <- solar_by_zip %>%
group_by(state) %>%
reframe(bad_yearly_kwh = sum(yearly_solar_kwh_produced >=18000)) %>%
mutate(num_yearly_kwh = num_yearly_kwh()) %>%
mutate(percent_bad_yearly_kwh = (bad_yearly_kwh/num_yearly_kwh)*100) %>%
arrange(-percent_bad_yearly_kwh)
temp <- solar_by_zip %>%
group_by(state) %>%
reframe(bad_yearly_kwh = sum(yearly_solar_kwh_produced >=18000)) %>%
mutate(num_yearly_kwh = count(solar_by_zip, state)['n']) %>%
mutate(percent_bad_yearly_kwh = (bad_yearly_kwh/num_yearly_kwh)*100) %>%
arrange(-percent_bad_yearly_kwh) %>%
summarise(percent_abnormal_kw_pot,percent_abnormal_yearly_kwh)
temp <- solar_by_zip %>%
group_by(state) %>%
reframe(abnormal_kw_pot = sum(kw_potential_for_median_house >= 20), abnormal_yearly_kwh = sum(yearly_solar_kwh_produced >=18000)) %>%
mutate(num_data_pts = count(solar_by_zip, state)['n']) %>%
mutate(percent_abnormal_kw_pot = (abnormal_kw_pot/num_data_pts)*100) %>%
mutate(percent_abnormal_yearly_kwh = (abnormal_yearly_kwh/num_data_pts)*100) %>%
arrange(-percent_abnormal_yearly_kwh) %>%
summarise(percent_abnormal_kw_pot,percent_abnormal_yearly_kwh)
temp <- solar_by_zip %>%
group_by(state) %>%
reframe(abnormal_kw_pot = sum(kw_potential_for_median_house >= 20), abnormal_yearly_kwh = sum(yearly_solar_kwh_produced >=18000)) %>%
mutate(num_data_pts = count(solar_by_zip, state)['n']) %>%
mutate(percent_abnormal_kw_pot = (abnormal_kw_pot/num_data_pts)*100) %>%
mutate(percent_abnormal_yearly_kwh = (abnormal_yearly_kwh/num_data_pts)*100) %>%
arrange(-percent_abnormal_yearly_kwh) %>%
reframe(percent_abnormal_kw_pot,percent_abnormal_yearly_kwh)
View(temp)
temp['state', 'percent_abnormal_kw_pot', 'percent_abnormal_yearly_kwh']
temp <- solar_by_zip %>%
group_by(state) %>%
reframe(abnormal_kw_pot = sum(kw_potential_for_median_house >= 20), abnormal_yearly_kwh = sum(yearly_solar_kwh_produced >=18000)) %>%
mutate(num_data_pts = count(solar_by_zip, state)['n']) %>%
mutate(percent_abnormal_kw_pot = (abnormal_kw_pot/num_data_pts)*100) %>%
mutate(percent_abnormal_yearly_kwh = (abnormal_yearly_kwh/num_data_pts)*100) %>%
arrange(-percent_abnormal_yearly_kwh)
temp['state', 'percent_abnormal_kw_pot', 'percent_abnormal_yearly_kwh']
View(temp)
temp <- solar_by_zip %>%
group_by(state) %>%
reframe(abnormal_kw_pot = sum(kw_potential_for_median_house >= 20), abnormal_yearly_kwh = sum(yearly_solar_kwh_produced >=18000)) %>%
mutate(num_data_pts = count(solar_by_zip, state)['n']) %>%
mutate(percent_abnormal_kw_pot = (abnormal_kw_pot/num_data_pts)*100) %>%
mutate(percent_abnormal_yearly_kwh = (abnormal_yearly_kwh/num_data_pts)*100) %>%
arrange(-percent_abnormal_yearly_kwh) %>%
select(state, percent_abnormal_kw_pot, percent_abnormal_yearly_kwh)
View(temp)
worst_sd_yearly <- sd_data %>% arrange(-sd_yearly) %>% slice(1:5) %>% select(state)
View(worst_sd_yearly)
View(worst_sd_yearly)
worst_sd_yearly <- sd_data %>% arrange(-sd_yearly) %>% slice(1:5) %>% select(state)
worst_yearly_states = c("Tennessee", "District of Columbia", "North Dakota", "Virginia", "Missouri")
plot_data <- solar_by_zip %>%
subset(state %in% worst_yearly_states)
ggplot(data = plot_data) +
geom_point(mapping = aes(x=zip_code, y=estimated_percent_of_houses_qualified, color=state)) +
facet_wrap(~state, scales = "free") +
theme(legend.position = "none")
ggplot(data = plot_data) +
geom_point(mapping = aes(x=zip_code, y=yearly_solar_kwh_produced, color=state)) +
facet_wrap(~state, scales = "free") +
theme(legend.position = "none")
worst_sd_yearly <- sd_data %>% arrange(-sd_yearly) %>% slice(1:5) %>% select(state)
worst_yearly_states = c("New Mexico", "District of Columbia", "North Dakota", "Michigan", "Montana")
plot_data <- solar_by_zip %>%
subset(state %in% worst_yearly_states)
ggplot(data = plot_data) +
geom_point(mapping = aes(x=zip_code, y=yearly_solar_kwh_produced, color=state)) +
facet_wrap(~state, scales = "free") +
theme(legend.position = "none")
# These states need more data before they can produce reliable results.
# We will still include them for now, for completion.
count(solar_by_zip, state) %>% filter(n<30)
View(solar_by_zip)
